//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "rules")]
pub enum Rules {
    #[sea_orm(string_value = "Ax")]
    Ax,
    #[sea_orm(string_value = "ImplIntro")]
    ImplIntro,
    #[sea_orm(string_value = "ImplElim")]
    ImplElim,
    #[sea_orm(string_value = "FalseElim")]
    FalseElim,
    #[sea_orm(string_value = "NotIntro")]
    NotIntro,
    #[sea_orm(string_value = "NotElim")]
    NotElim,
    #[sea_orm(string_value = "AndIntro")]
    AndIntro,
    #[sea_orm(string_value = "AndElimL")]
    AndElimL,
    #[sea_orm(string_value = "AndElimR")]
    AndElimR,
    #[sea_orm(string_value = "OrIntroL")]
    OrIntroL,
    #[sea_orm(string_value = "OrIntroR")]
    OrIntroR,
    #[sea_orm(string_value = "OrElim")]
    OrElim,
    #[sea_orm(string_value = "ForallElim")]
    ForallElim,
    #[sea_orm(string_value = "ForallIntro")]
    ForallIntro,
    #[sea_orm(string_value = "ExistsElim")]
    ExistsElim,
    #[sea_orm(string_value = "ExistsIntro")]
    ExistsIntro,
    #[sea_orm(string_value = "AlphaExists")]
    AlphaExists,
    #[sea_orm(string_value = "AlphaForall")]
    AlphaForall,
}
